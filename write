#!/usr/bin/env python3.11
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# Copyright 2024 Robert D. French
import base64
from dataclasses import dataclass
from enum import Enum, auto
import hashlib
import json
from typing import List
import os
from urllib import request
import shutil
import subprocess
import sys
import tempfile


NAMESPACE = "wmap@wmap.dev"


def main():  # pragma: no cover
    """
    Application entrypoint.

    QA note: This function is not covered in unit testing as it is part of the
    user interface.
    """
    http_method = os.getenv('REQUEST_METHOD', 'GET')
    if http_method != "POST":
        wrong_method()
    else:
        with tempfile.NamedTemporaryFile(delete=True) as f:
            save_stdin(f)
            if verify(f.name):
                verified_upload(f.name)
            else:
                unverified_upload()
                

def save_stdin(f):
    f.write(sys.stdin.read().encode())
    f.flush()
    os.fsync(f.fileno())


def verified_upload(name):
    sha256 = hashlib.sha256()
    with open(name, 'rb') as f:
        for block in iter(lambda: f.read(4096), b""):
            sha256.update(block)
    hd = sha256.hexdigest()
    shutil.copy(name, f"/var/www/htdocs/wmap/{hd}.wmap")
    print("Status: 201 Created")
    print(f"Location: /wmap/{hd}.wmap")
    print("Content-Type: text/plain\n")
    print("Your message has been posted")


def wrong_method():                
    print("Status: 405 Method Not Allowed")
    print("Allow: POST")
    print("Content-Type: text/plain\n")
    print("Post your message with the wmap client.")
    

def unverified_upload():
    print("Status: 400 Bad Request")
    print("Content-Type: text/plain\n")
    print("Your message is invalid. Your wmap client may have a bug.")


def sign(username: str, key: str, file: str):  # pragma: no cover
    """
    Produce a signed, WMAP-formatted version of the input file.

    Parameters:
    - username: the GitHub username of the author of `file`
    - key: the path to the ssh private key of the author. The corresponding
      public key must be installed on the author's GitHub account.
    - file: the path to the file being signed

    Upon success, a WMAP-formatted file called `file`.wmap will be created in
    the same directory as `file`.
    """
    profile = Profile(username)
    private_key = PrivateKey(profile, key)
    private_key.sign(file)
    message = Message.from_signed_file(profile, file)
    message.dump(file + ".wmap")
    os.remove(file + ".sig")


def verify(file: str):  # pragma: no cover
    """
    Verify the integrity of a WMAP-formatted file.

    Parameters:
    - file: the path to a WMAP-formatted file

    If the file cannot be verified, this function will cause wmap to exit
    nonzero.

    QA note: This function is not covered in unit testing as it is part of the
    user interface.
    """
    message = Message.load(file)
    message.signature.dump(file + ".sig")
    valid = message.profile.verify_signed_data(message.body, file + ".sig")
    os.remove(file + ".sig")
    return valid


def extract(file: str, skip_validation: bool = False):  # pragma: no cover
    """
    Verify, decode, and print the body of a WMAP-formatted file.

    Parameters:
    - file: the path to a WMAP-formatted file
    - skip_validation: allow wmap to extract the body from an invalid file.

    QA note: This function is not covered in unit testing as it is part of the
    user interface.
    """
    if not skip_validation:
        verify(file)
    message = Message.load(file)
    print(str(message.body, 'utf-8'))


class Algorithm(Enum):
    """
    Allowable algorithms for SSH signing keys.
    """
    RSA = auto()
    ED25519 = auto()

    @classmethod
    def parse(cls, string: str) -> 'Algorithm':
        """
        Attempt to parse a string into one of these Algorithm enum instances.

        Parameters:
        - string: a string which may or may not be a valid SSH signing
          algorithm.

        Raises:
        - Exception: if the string does not match an allowed algorithm.
        """
        if string == "ssh-rsa":
            return cls.RSA
        elif string == "ssh-ed25519":
            return cls.ED25519
        else:
            raise Exception("Unknown ssh key algorithm")

    def __str__(self):
        if self == Algorithm.RSA:
            return "ssh-rsa"
        if self == Algorithm.ED25519:
            return "ssh-ed25519"


@dataclass
class AuthorizedKey:
    """
    Representation of an Authorized Key entry, as seen in an
    ~/.ssh/authorized_keys file or on a user's GitHub profile.
    """
    algorithm: Algorithm
    material: str
    comment: str

    @classmethod
    def parse(cls, string: str) -> 'AuthorizedKey':
        """
        Parse an authorized keys entry into its constituent parts. Such entries
        take the following form:

            ssh-rsa ABC...123 username@example.com (other comments)

        Parameters:
        - string: a string which ought to be a normal-looking authorized keys
          entry.
        """
        parts = string.split()
        algorithm = Algorithm.parse(parts[0])
        return cls(algorithm, parts[1], " ".join(parts[2:]))

    def into_allowed_signer(self, profile: 'Profile') -> str:
        """
        Convert this authorized keys entry into an ALLOWED SIGNERS entry. Such
        records take the following form:

            username namespacs="wmap@wmap.dev" ssh-rsa ABC...123

        More information on ALLOWED SIGNERS can be found in the `ssh-keygen(1)`
        manual page.

        Parameters:
        - profile: the profile of the GitHub user for whom we'd like to build
          the ALLOWED SIGNERS record.
        """
        principal = profile.username
        algorithm = str(self.algorithm)
        material = self.material
        return f"{principal} namespaces=\"{NAMESPACE}\" {algorithm} {material}"


@dataclass
class Profile:
    """
    The GitHub profile associated with `username`
    """
    username: str

    def url(self) -> str:
        """URL for this user's github profile"""
        return f"https://github.com/{self.username}"

    def authorized_keys_url(self) -> str:
        """URL for this user's ssh public keys"""
        return self.url() + ".keys"

    def authorized_keys(self) -> List[AuthorizedKey]:
        """
        Grab the user's Authorized Keys from GitHub, transforming each of them
        into an AuthorizedKey object.
        """
        with request.urlopen(self.authorized_keys_url()) as response:
            lines = response.read().decode().splitlines()
            return [AuthorizedKey.parse(line) for line in lines]

    def allowed_signers(self) -> List[str]:
        """
        Transform each Authorized Key into an ALLOWED SIGNERS record

        More information on ALLOWED SIGNERS can be found in the `ssh-keygen(1)`
        manual page.
        """
        return [k.into_allowed_signer(self) for k in self.authorized_keys()]

    def verify_signed_data(self, data: bytes, signature_path: str) -> bool:
        """
        Check whether we have a valid signature for `data` from the current
        GitHub user.

        Parameters:
        - data: the bytes which were signed
        - signature_path: a path to the signature file created by ssh-keygen

        Returns true if the signature matches, false if not.
        """
        with tempfile.NamedTemporaryFile() as asf:
            signers = "\n".join(self.allowed_signers()) + "\n"
            asf.write(bytes(signers, 'utf-8'))
            asf.flush()
            results = subprocess.run([
                'ssh-keygen', '-Y', 'verify',
                '-f', asf.name,
                '-I', self.username,
                '-n', NAMESPACE,
                '-s', signature_path
            ], input=data, capture_output=True)
            return results.returncode == 0

    def __str__(self) -> str:
        return self.username


@dataclass
class PrivateKey:
    """
    An SSH Private Key for the GitHub user identified by the `profile` object.
    """
    profile: Profile
    path: str

    def sign(self, file: str):
        """
        Use this private key to sign the contents of `file`.

        Parameters:
        - file: the file (on disk) which should be signed

        Upon success, the signature will be stored in `file`.sig.
        """
        subprocess.run([
            'ssh-keygen', '-Y', 'sign',
            '-f', self.path,
            '-n', NAMESPACE,
            file
        ], check=True)


@dataclass
class Signature:
    """
    The output of ssh-keygen -Y sign
    """
    content: str

    @classmethod
    def load(cls, path: str) -> 'Signature':
        """
        Load an SSH signature from a file

        Parameters:
        - path: path to an SSH signature file

        The SSH signature is stored on disk in a format determined by OpenSSH.
        This format is line-oriented, which is tricky to work with in a JSON
        document. As such, we choose to work with a base64-encoded
        representation of this signature instead.
        """
        with open(path) as f:
            raw_text = f.read()
            content = str(base64.b64encode(bytes(raw_text, 'utf-8')), 'utf-8')
            return cls(content)

    def dump(self, path: str):
        """
        Write an SSH signature to disk,

        Parameters:
        - path: the path where the SSH signature should be written

        Since the SSH signature in a WMAP file (and in this object) is in
        base64, we need to decode it before writing it to disk so that it
        matches the format which ssh-keygen expects.
        """
        with open(path, 'w') as f:
            decoded = str(base64.b64decode(self.content), 'utf-8')
            f.write(decoded)

    def __str__(self) -> str:
        return self.content


@dataclass
class Message:
    """
    A signed copy of the original content, which can be shared with and
    validated by anyone.
    """
    profile: Profile
    body: bytes
    signature: Signature

    @classmethod
    def from_signed_file(cls, profile: Profile, path: str) -> 'Message':
        """
        Create a Message from a file and its signature.

        Parameters:
        - profile: the GitHub profile of the user who signed this document
        - path: path to the document which was signed

        Assumptions:
        The document referenced by `path` should have been signed (using wmap)
        prior to calling this method. In particular, an OpenSSH-formatted
        signature file should exist on disk at `path`.sig.
        """
        with open(path, 'rb') as f:
            body = f.read()
        signature = Signature.load(path + ".sig")
        return cls(profile, body, signature)

    @classmethod
    def load(cls, path: str) -> 'Message':
        """
        Load an existing JSON-formatted WMAP message from disk.

        Parameters:
        - path: path to the JSON-formatted WMAP message
        """
        with open(path) as f:
            d = json.load(f)
            profile = Profile(d['profile'])
            signature = Signature(d['signature'])
            body = base64.b64decode(d['body'])
            return cls(profile, body, signature)

    def into_dict(self) -> dict[str, str]:
        """
        Convert this object into a python dictionary, and convert each of its
        fields into their string representation.
        """
        return {
            'profile': str(self.profile),
            'body': str(base64.b64encode(self.body), 'utf-8'),
            'signature': str(self.signature)
        }

    def dump(self, path: str):
        """
        Store this message on disk.

        Parameters:
        - path: path on disk where this JSON-formatted WMAP message should be
          written.
        """
        with open(path, 'w') as f:
            json.dump(self.into_dict(), f)


if __name__ == "__main__":  # pragma: no cover
    main()
