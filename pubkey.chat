#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# Copyright 2024 Robert D. French
"""
The Web-based Message Authentication Protocol

WMAP allows secure exchange of signed messages between users using their GitHub
SSH keys. This tool allows you to sign, verify, and extract messages.

Key features:
- Sign messages using SSH keys linked to GitHub accounts
- Verify the authenticity and integrity of signed messages
- Extract the content of signed messages

This module implements the core functionality of WMAP, including command-line
interface, cryptographic operations, and file handling.
"""
import argparse
import base64
import configparser
import curses
from dataclasses import dataclass
from enum import Enum, auto
import hashlib
import json
from typing import List, Optional
import os
from urllib import request
import re
import subprocess
import tempfile
import threading
import time


# This is the SSH signing namespace that we use for wmap messages. This is to
# distinguish WMAP signatures from other SSH signin functions, as encouraged by
# the ssh-keygen(1) man page.
NAMESPACE = "wmap@wmap.dev"


# This is the hardcoded base URL for the pubkey.chat service. This will need to
# be configured, in the future, to default to `pubkey.chat` but also be
# overridable for the sake of testing.
API_BASE_URL = "https://oe9xunloch.execute-api.us-east-1.amazonaws.com/prod"


def main():  # pragma: no cover
    parser = argparse.ArgumentParser(
            description="A CLI for your curses application.")

    # Create subparsers for the 'chat' and 'daemon' commands
    subparsers = parser.add_subparsers(
            dest='command', required=True, help='Subcommand to run')

    # Chat subcommand
    chat_parser = subparsers.add_parser('chat', help='Run the chat mode')
    chat_parser.add_argument(
        '--config',
        metavar='CONFIG',
        type=str,
        default=os.path.expanduser("~/.config/pubkey.chat/config.ini"),
        help='Chat config (defaults to ~/.config/pubkey.chat/config.ini)'
    )
    chat_parser.add_argument(
        'topic',
        type=str,
        help='Specify a topic for chat mode'
    )

    # Daemon subcommand
    daemon_parser = subparsers.add_parser('daemon', help='Run the daemon mode')
    daemon_parser.add_argument(
        '--config',
        metavar='CONFIG',
        type=str,
        required=True,
        help='Run the daemon with the specified config file'
    )

    # Parse the arguments
    args = parser.parse_args()

    # Execute the corresponding function based on the subcommand
    if args.command == 'chat':
        chat_main(args.config, args.topic)
    elif args.command == 'daemon':
        daemon_main(args.config)


def chat_main(chat_config: str, topic: str):  # pragma: no cover
    """
    Open a chat window for 'topic'

    Parameters:
    - username: Your GitHub username
    - key: Path to your SSH private key
    - topic: The room you'd like to join
    """
    if not os.path.exists(chat_config):
        username = input("GitHub username: ")
        key_path = input("SSH Private key: ")
        config = configparser.ConfigParser()
        config['Credentials'] = {
            'username': username,
            'key_path': os.path.expanduser(key_path)
        }
        os.makedirs(os.path.dirname(chat_config), exist_ok=True)
        with open(chat_config, 'w') as f:
            config.write(f)

    config = configparser.ConfigParser()
    config.read(chat_config)
    username = config.get('Credentials', 'username')
    key_path = config.get('Credentials', 'key_path')

    def chat_loop(stdscr):
        user = ChatSession(username, key_path, topic)
        interface = ChatInterface(stdscr, user)

        def update_messages():
            while True:
                interface.update_messages()
                time.sleep(2)

        comms_thread = threading.Thread(target=update_messages)
        comms_thread.daemon = True
        comms_thread.start()

        while True:
            interface.redraw()
            interface.check_input()
            time.sleep(0.016)

    curses.wrapper(chat_loop)


def daemon_main(config_path: str):  # pragma: no cover
    """
    Launch the chat service

    Parameters:
    - config_path: path to the chat service's config file

    The config file should spell out the AWS Region ('region'), name of an S3
    bucket into which messages will be written ('bucket_name'), and the name of
    an SQS queue from which messages will be pulled ('queue_name').
    """
    config = configparser.ConfigParser()
    config.read(config_path)
    s3 = S3Wrapper(
        config['DEFAULT']['region'],
        config['DEFAULT']['bucket_name']
    )
    bucket = PublicChatBucket(s3)
    sqs = SQSWrapper(
        config['DEFAULT']['region'],
        config['DEFAULT']['queue_name']
    )
    queue = Queue(sqs)
    for message in queue.messages():
        try:
            if message.is_valid():
                bucket.write_message(message)
        except Exception as e:
            print(f"Error: {e}")


class SigningAlgorithm(Enum):
    """
    Allowable algorithms for SSH signing keys.

    Not all SSH key algorithms support signing. RSA and ED25519 do, so when
    parsing an Allowed Signers record or an Authorized Key record, we want to
    restrict ourselves to those two algorithms.
    """
    RSA = auto()
    ED25519 = auto()

    @classmethod
    def parse(cls, string: str) -> 'SigningAlgorithm':
        """
        Attempt to parse a string into one of these SigningAlgorithm enum
        instances.

        Parameters:
        - string: a string which may or may not be a valid SSH signing
          algorithm.

        Raises:
        - Exception: if the string does not match an allowed algorithm.
        """
        if string == "ssh-rsa":
            return cls.RSA
        elif string == "ssh-ed25519":
            return cls.ED25519
        else:
            raise Exception("Unknown ssh key algorithm")

    def __str__(self):
        if self == SigningAlgorithm.RSA:
            return "ssh-rsa"
        if self == SigningAlgorithm.ED25519:
            return "ssh-ed25519"


@dataclass
class AuthorizedKey:
    """
    Representation of an Authorized Key entry, as seen in an
    ~/.ssh/authorized_keys file.

    See the AUTHORIZED_KEYS_FILE_FORMAT section of the sshd(8) man page for
    more information about what these files look like.
    """
    algorithm: SigningAlgorithm
    material: str
    comment: str

    @classmethod
    def parse(cls, string: str) -> 'AuthorizedKey':
        """
        Parse an authorized keys entry into its constituent parts. Such entries
        take the following form:

            ssh-rsa ABC...123 username@example.com (other comments)

        Parameters:
        - string: a string which ought to be a normal-looking authorized keys
          entry.
        """
        parts = string.split()
        algorithm = SigningAlgorithm.parse(parts[0])
        return cls(algorithm, parts[1], " ".join(parts[2:]))

    def into_allowed_signer(self, profile: 'Profile') -> str:
        """
        Convert this authorized keys entry into an ALLOWED SIGNERS entry. Such
        records take the following form:

            username namespacs="wmap@wmap.dev" ssh-rsa ABC...123

        More information on ALLOWED SIGNERS can be found in the `ssh-keygen(1)`
        manual page.

        Parameters:
        - profile: the profile of the GitHub user for whom we'd like to build
          the ALLOWED SIGNERS record.
        """
        principal = profile.username
        algorithm = str(self.algorithm)
        material = self.material
        return f"{principal} namespaces=\"{NAMESPACE}\" {algorithm} {material}"


@dataclass
class PublicChatBucket:
    s3: 'S3Wrapper'

    def write_message(self, msg: 'SignedMessage'):
        msg_id = msg.digest()
        self.s3.write(f"messages/{msg_id}", msg.dumps())
        interior = msg.interior()
        head = self.s3.read(f"topics/{interior.topic}")
        if not head:
            self.s3.write(f"topics/{interior.topic}", msg_id)
        if interior.parent == head:
            self.s3.write(f"topics/{interior.topic}", msg_id)


@dataclass
class ChatAPIClient:
    """
    Raw operations with the Chat Service backend
    """
    api_base_url: str
    rest_client: 'RestClient'

    def get_message(self, message_id: str) -> Optional['SignedMessage']:
        url = f"{self.api_base_url}/messages/{message_id}"
        msg_text = self.rest_client.get(url)
        if msg_text:
            return SignedMessage.loads(msg_text)
        else:
            return None

    def get_head(self, topic: str) -> str:
        url = f"{self.api_base_url}/topics/{topic}"
        response = self.rest_client.get(url)
        if not response:
            return ""
        if re.fullmatch(r'[0-9a-fA-F]{64}', response):
            # response is 64 hex chars
            return response
        else:
            return ""

    def post_message(self, message: 'SignedMessage') -> str:
        url = f"{self.api_base_url}/messages"
        payload = message.into_dict()
        return self.rest_client.post_json(url, payload)


class ChatInterface:  # pragma: no cover
    def __init__(self, stdscr, session: 'ChatSession'):
        self.stdscr = stdscr
        self.session = session
        self.current_input = ""
        self.client = ChatAPIClient(API_BASE_URL, RestClient())

        curses.curs_set(0)  # Hide cursor
        stdscr.nodelay(1)  # Don't block when waiting for input
        stdscr.timeout(1000)  # Refresh every second

        self.messages_win = curses.newwin(curses.LINES - 3, curses.COLS, 0, 0)
        self.input_win = curses.newwin(3, curses.COLS, curses.LINES - 3, 0)

        self.draw_input_window()

    def draw_input_window(self):
        self.input_win.addstr(1, 1, f"> {self.current_input}")
        self.input_win.refresh()

    def post_message(self, text: str):
        interior = self.session.new_interior_message(text)
        profile = Profile(self.session.username)
        pk = PrivateKey(profile, self.session.key_path)
        signed_message = pk.sign_data(interior.dumps().encode())
        self.client.post_message(signed_message)

    def update_messages(self):
        # This can lose messages
        current_parent = self.client.get_head(self.session.topic)
        if self.session.update_parent(current_parent):
            head_msg = self.client.get_message(current_parent)
            self.session.append(head_msg)

    def redraw(self):
        self.messages_win.clear()
        self.input_win.clear()  # maybe not the first time?
        self.draw_input_window()
        display_history = self.session.get_history(curses.LINES - 3)
        for i, text in enumerate(display_history):
            self.messages_win.addstr(i, 0, text)
        self.messages_win.refresh()
        self.input_win.refresh()

    def check_input(self):
        key = self.stdscr.getch()
        if key == curses.KEY_RESIZE:
            # Resize windows if terminal size changes
            self.messages_win.resize(curses.LINES - 3, curses.COLS)
            self.input_win.resize(3, curses.COLS)
            self.input_win.mvwin(curses.LINES - 3, 0)
        elif key == ord('\n'):
            if self.current_input.strip():
                self.post_message(self.current_input.strip())
                self.current_input = ""
        elif key == 27:  # Escape key
            raise "escape"
        elif key == curses.KEY_BACKSPACE or key == 127:
            self.current_input = self.current_input[:-1]
        elif key != -1:
            self.current_input += chr(key)


@dataclass
class InteriorMessage:
    topic: str
    parent: str
    text: str

    def into_dict(self) -> dict[str, str]:
        return {
                'topic': self.topic,
                'parent': self.parent,
                'text': self.text
        }

    def dumps(self) -> str:
        return json.dumps(self.into_dict())


@dataclass
class SignedMessage:
    """
    A signed copy of the original content, which can be shared with and
    validated by anyone.
    """
    profile: 'Profile'
    body: bytes
    signature: 'Signature'

    @classmethod
    def from_raw_parts(cls, profile: 'Profile', path: str) -> 'SignedMessage':
        """
        Create a SignedMessage object from a file and its signature.

        Parameters:
        - profile: the GitHub profile of the user who signed this document
        - path: path to the document which was signed

        Assumptions:
        The document referenced by `path` should have been signed (using wmap)
        prior to calling this method. In particular, an OpenSSH-formatted
        signature file should exist on disk at `path`.sig.
        """
        with open(path, 'rb') as f:
            body = f.read()
        signature = Signature.load(path + ".sig")
        return cls(profile, body, signature)

    @classmethod
    def from_dict(cls, parts: dict[str, str]) -> 'SignedMessage':
        profile = Profile(parts['profile'])
        body = base64.b64decode(parts['body'].encode())
        signature = Signature(parts['signature'])
        return cls(profile, body, signature)

    @classmethod
    def load(cls, path: str) -> 'SignedMessage':
        """
        Load an existing JSON-formatted WMAP message from disk.

        Parameters:
        - path: path to the JSON-formatted WMAP message
        """
        with open(path) as f:
            return cls.loads(f.read())

    @classmethod
    def loads(cls, data: str) -> 'SignedMessage':
        """
        Load an existing JSON-formatted WMAP message from disk.

        Parameters:
        - path: path to the JSON-formatted WMAP message
        """
        d = json.loads(data)
        return cls.from_dict(d)

    def into_dict(self) -> dict[str, str]:
        """
        Convert this object into a python dictionary, and convert each of its
        fields into their string representation.
        """
        return {
            'profile': str(self.profile),
            'body': str(base64.b64encode(self.body), 'utf-8'),
            'signature': str(self.signature)
        }

    def dump(self, path: str):
        """
        Store this message on disk.

        Parameters:
        - path: path on disk where this JSON-formatted WMAP message should be
          written.
        """
        with open(path, 'w') as f:
            json.dump(self.into_dict(), f)

    def dumps(self) -> str:
        """
        Convert this message to a json string
        """
        return json.dumps(self.into_dict())

    def is_valid(self) -> bool:
        with tempfile.NamedTemporaryFile() as sigfile:
            self.signature.dump(sigfile.name)
            sigfile.flush()
            return self.profile.verify_signed_data(self.body, sigfile.name)

    def interior(self) -> InteriorMessage:
        i = json.loads(self.body.decode())
        if 'text' in i:
            text = i['text']
        else:  # pragma: no cover
            text = i['data']  # This is for old data
        return InteriorMessage(i['topic'], i['parent'], text)

    def digest(self) -> str:
        digest = hashlib.sha256()
        digest.update(self.dumps().encode())
        return digest.hexdigest()


@dataclass
class Profile:
    """
    The GitHub profile associated with `username`
    """
    username: str

    def url(self) -> str:
        """URL for this user's github profile"""
        return f"https://github.com/{self.username}"

    def authorized_keys_url(self) -> str:
        """URL for this user's ssh public keys"""
        return self.url() + ".keys"

    def authorized_keys(self) -> List[AuthorizedKey]:
        """
        Grab the user's Authorized Keys from GitHub, transforming each of them
        into an AuthorizedKey object.
        """
        with request.urlopen(self.authorized_keys_url()) as response:
            lines = response.read().decode().splitlines()
            return [AuthorizedKey.parse(line) for line in lines]

    def allowed_signers(self) -> List[str]:
        """
        Transform each Authorized Key into an ALLOWED SIGNERS record

        More information on ALLOWED SIGNERS can be found in the `ssh-keygen(1)`
        manual page.
        """
        return [k.into_allowed_signer(self) for k in self.authorized_keys()]

    def verify_signed_data(self, data: bytes, signature_path: str) -> bool:
        """
        Check whether we have a valid signature for `data` from the current
        GitHub user.

        Parameters:
        - data: the bytes which were signed
        - signature_path: a path to the signature file created by ssh-keygen

        Returns true if the signature matches, false if not.
        """
        with tempfile.NamedTemporaryFile() as allowed_signers_file:
            signers = "\n".join(self.allowed_signers()) + "\n"
            # We write and flush together because we need to know for sure that
            # all these bytes have been written to disk before we try to point
            # ssh-keygen at this file.
            allowed_signers_file.write(bytes(signers, 'utf-8'))
            allowed_signers_file.flush()
            results = subprocess.run([
                'ssh-keygen', '-Y', 'verify',
                '-f', allowed_signers_file.name,  # This file was just flushed.
                '-I', self.username,
                '-n', NAMESPACE,
                '-s', signature_path
            ], input=data, capture_output=True)
            return results.returncode == 0

    def __str__(self) -> str:
        return self.username


@dataclass
class PrivateKey:
    """
    An SSH Private Key for the GitHub user identified by the `profile` object.
    """
    profile: Profile
    path: str

    def sign(self, file: str):
        """
        Use this private key to sign the contents of `file`.

        Parameters:
        - file: the file (on disk) which should be signed

        Upon success, the signature will be stored in `file`.sig.
        """
        subprocess.run([
            'ssh-keygen', '-Y', 'sign',
            '-f', self.path,
            '-n', NAMESPACE,
            file
        ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def sign_data(self, data: bytes) -> SignedMessage:  # pragma: no cover
        with tempfile.NamedTemporaryFile() as f:
            sigfile = f.name + ".sig"
            f.write(data)
            f.flush()
            self.sign(f.name)
            message = SignedMessage.from_raw_parts(self.profile, f.name)
            os.remove(sigfile)
            return message


@dataclass
class Queue():
    sqs: 'SQSWrapper'

    def messages(self):
        while True:
            candidates = self.sqs.receive(1)
            if len(candidates) == 0:  # pragma: no cover
                continue
            message = candidates[0]
            yield SignedMessage.from_dict(json.loads(message['Body']))
            self.sqs.delete(message['ReceiptHandle'])


@dataclass
class RestClient:  # pragma: no cover
    def get(self, url: str) -> Optional[str]:
        with request.urlopen(url) as response:
            return response.read().decode().rstrip()

    def post_json(self, url: str, payload: dict) -> str:
        data = json.dumps(payload).encode()
        headers = {'Content-Type': 'application/json'}
        r = request.Request(url, data=data, headers=headers, method='POST')
        with request.urlopen(r) as response:
            return response.read().decode()


class S3Wrapper:  # pragma: no cover
    def __init__(self, region, name):
        import boto3  # type: ignore
        self.client = boto3.client('s3', region_name=region)
        self.name = name

    def write(self, key: str, value: str):
        self.client.put_object(
            Bucket=self.name,
            Key=key,
            Body=value
        )

    def read(self, key: str) -> Optional[str]:
        try:
            response = self.client.get_object(
                Bucket=self.name,
                Key=key
            )
            return response['Body'].read().decode()
        except Exception as e:
            type(e)
            return None


class ChatSession:
    username: str
    key_path: str
    topic: str
    history: list[str]
    parent: str

    def __init__(self, username: str, key_path: str, topic: str):
        self.username = username
        self.key_path = key_path
        self.topic = topic
        self.history = []
        self.parent = ""

    def new_interior_message(self, text: str) -> InteriorMessage:
        return InteriorMessage(self.topic, self.parent, text)

    def get_history(self, n) -> list[str]:
        return self.history[-n:]

    def update_parent(self, new_parent) -> bool:
        if new_parent != self.parent:
            self.parent = new_parent
            return True
        return False

    def append(self, message: 'SignedMessage'):
        username = message.profile.username
        interior_text = message.interior().text
        self.history.append(f"{username}: {interior_text}")


@dataclass
class Signature:
    """
    The output of ssh-keygen -Y sign
    """
    content: str

    @classmethod
    def load(cls, path: str) -> 'Signature':
        """
        Load an SSH signature from a file

        Parameters:
        - path: path to an SSH signature file

        The SSH signature is stored on disk in a format determined by OpenSSH.
        This format is line-oriented, which is tricky to work with in a JSON
        document. As such, we choose to work with a base64-encoded
        representation of this signature instead.
        """
        with open(path) as f:
            raw_text = f.read()
            # Encode the signature bytes file as a Base64 string
            content = str(base64.b64encode(bytes(raw_text, 'utf-8')), 'utf-8')
            return cls(content)

    def dump(self, path: str):
        """
        Write an SSH signature to disk,

        Parameters:
        - path: the path where the SSH signature should be written

        Since the SSH signature in a WMAP file (and in this object) is in
        base64, we need to decode it before writing it to disk so that it
        matches the format which ssh-keygen expects.
        """
        with open(path, 'w') as f:
            decoded = str(base64.b64decode(self.content), 'utf-8')
            f.write(decoded)

    def __str__(self) -> str:
        return self.content


class SQSWrapper:  # pragma: no cover
    name: str
    region: str

    def __init__(self, region: str, name: str):
        import boto3  # type: ignore
        self.client = boto3.client('sqs', region_name=region)
        self.name = name
        self.region = region

    def receive(self, max_messages: int) -> List[dict]:
        response = self.client.receive_message(
            QueueUrl=self.name,
            MaxNumberOfMessages=max_messages,
            WaitTimeSeconds=20
        )
        return response.get('Messages', [])

    def delete(self, receipt_handle: str):
        self.client.delete_message(
            QueueUrl=self.name,
            ReceiptHandle=receipt_handle
        )

    def __repr__(self) -> str:
        return f"SQSWrapper({self.region}, {self.name})"


if __name__ == "__main__":  # pragma: no cover
    # This is a common Python trick.
    #
    # The `main` function is only called if this file is being run as a
    # *program* (in which case the global __name__ variable will be set to
    # "__main__"). If this file is being used as a library (which is the case
    # when we run the unit tests), `main` will not be called.
    main()
